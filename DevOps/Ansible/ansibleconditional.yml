# when , and , or are acting as conditionals
-
  name: Play 1
  host: localhost
  tasks:
    -  name: Installing nginx on Debian
       apt:
        name: nginx
        state: present
        When: ansible_os_family == 'Debian' and 
              ansible_distribution_version == "16.04"
    -  name: Installing nginx on RHEL
       yum:
        name: nginx
        state: present
        When: ansible_os_family == 'RedHat' or 
              ansible_os_family == 'SUSE'


# conditionals in loops

-
  name: Play 1
  host: all
  vars:
    packages:
      - name: nginx
        required: true
      - name: mysql
        required: true
      - name: apache
        required: true
  tasks: 
    - name : Install "{{ item.name }}" on Debian
      apt:
        name: "{{ item.name }}"
        state: present
        when: item.required == true
        loop: "{{ packages }}"


# Conditional and Registers 

-
  name: Check the status of a service and send email if it is down
  hosts: localhost
  tasks:
    -  command: servie http status
       register: result

    - mail:
      to: admin@company.com
      subject: service alert
      body: service is down
      when: result.stdout.find('down') !=-1


# Conditionals with facts

- 
  name: Intsall nginx on Debian server
  apt:
    - name: nginx1.0.2
      state: present
      when: ansible.facts['os-family'] == 'Debian' and ansible_facts['distribution_major_version'] == '18'

# Conditionals with variables 

- 
  name: Deploy Configuration based on environment
  template:
    src: "{{ app_env }}_config.j2"
    dest: "/etc/myapp/config.conf"
  vars:
    app_env: production


# Conditionals for reuse 

- 
  name: Install required dependency
  apt:
    name: 
      - package1
      - package2
    state: present

- name:
    service:
        name: myapp
        state: started
    when: environment == 'production'


# Loops -------------------

# when we run a loop all the items inside the loop are stored in a variable called as item 

- 
  name: Play user 
  hosts: localhost
  tasks:
    - user: name='{{ item }}' state=present
      loop:
        -joe
        -sam
        -lucy
        -nolan
        -tim
        -clay
        -may 

- 
  name: Play user 1
  hosts: localhost
  tasks:
    - user: name='{{ item.name }}' state=present uid='{{ item.uid }}' 
      loop:
        - name: joe
          uid: 1010
        - name: sam
          uid: 1011
        - name: lucy
          uid: 1012
        - name: nolan
          uid: 1013
        - name: tim
          uid: 1014
        - name: clay
          uid: 1015
        - name: may
          uid: 1016 

# Loop is a new introduction , older directive is with_ , there can be multiple with_ directives eg-: with_items , with_url,
# with_file , with_monogdb , with_k8s
-
  name: Play user 1
  hosts: localhost
  tasks:
    - user: name='{{ item.name }}' state=present uid='{{ item.uid }}' 
      with_items:
        - name: joe
          uid: 1010
        - name: sam
          uid: 1011
        - name: lucy
          uid: 1012
        - name: nolan
          uid: 1013
        - name: tim
          uid: 1014
        - name: clay
          uid: 1015
        - name: may
          uid: 1016 